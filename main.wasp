app ZanthicTasks {
  wasp: {
    version: "^0.11.0"
  },
  title: "Zanthic Tasks",

  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
      // email: {
      //   fromField: {
      //     name: "Zanthic Automation - Tasks",
      //     email: "zanthicautomation@gmail.com"
      //   }
      // },
    },
    
    onAuthFailedRedirectTo: "/login",
  },
  db: {
    seeds: [
      import { seedUsers } from "@server/db/dbSeeds.js",
      import { seedCompanies } from "@server/db/dbSeeds.js",
    ]
  },

  dependencies: [
    ("load-json-file", "7.0.1"),
    ("react-icons", "^4.9.0"),
    ("multer", "^1.4.5-lts.1"),
    ("@types/multer", "^1.4.7"),
    ("daisyui", "^3.1.7"),
    ("zustand", "^4.3.8"),
    ("@headlessui/react", "^1.7.15"),
    ("@mui/material", "^5.13.7"),
    ("@emotion/react", "^11.11.1"),
    ("@emotion/styled", "^11.11.0")
  ]
}

// Use Prisma Schema Language (PSL) to define our entities: https://www.prisma.io/docs/concepts/components/prisma-schema
// Run `wasp db migrate-dev` in the CLI to create the database tables
// Then run `wasp db studio` to open Prisma Studio and view your db models
entity User {=psl
  id          String    @id @default(uuid())
  username    String  @unique
  password    String
  // email                     String?       @unique
  // password                  String?
  // isEmailVerified           Boolean       @default(false)
  // emailVerificationSentAt   DateTime?
  // passwordResetSentAt       DateTime?
  isAdmin     Boolean @default(false)
  tasks       TaskAssignment[]
psl=}

entity Company {=psl
  id    String    @id @default(uuid())
  name  String
  projects Project[]
  groups ProjectGroup[]
  createdAt DateTime @default(now())
psl=}

entity Project {=psl
  id    String    @id @default(uuid())
  name     String
  tasks     Task[]
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  groupId  String?
  group  ProjectGroup?   @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
psl=}

entity ProjectGroup {=psl
  id    String    @id @default(uuid())
  name      String
  projects  Project[]
  companyId String
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
psl=}

entity Task {=psl
  id    String    @id @default(uuid())
  description String
  comments    String?
  status      Int // 0 = incomplete, 1 = inactive, 2 = complete, 3 = archived
  assigned    TaskAssignment[]
  projectId  String?
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
psl=}


entity TaskAssignment {=psl
  taskId String
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([taskId, userId])
psl=}

route RootRoute { path: "/", to: MainPage }
route ResetPasswordRoute { path: "/reset-password", to: ResetPasswordPage }
page MainPage {
  authRequired: true,
  component: import { MainPage } from "@client/MainPage.tsx"
}

page ResetPasswordPage {
  authRequired: true,
  component: import ResetPasswordPage from "@client/ResetPasswordPage.tsx",
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@client/LoginPage.tsx"
}

query getAllTasks {
  fn: import {getAllTasks} from "@server/queries.js",
  entities: [Company, Project, Task]
}

query getCompanyIds {
  fn: import { getCompanyIds } from "@server/queries.js",
  entities: [Company]
}

query getProjectIds {
  fn: import { getProjectIds } from "@server/queries.js",
  entities: [Project]
}

query getUserIds {
  fn: import { getUserIds } from "@server/queries.js",
  entities: [User]
}

query getAssigneeNames {
  fn: import { getAssigneeNames } from "@server/queries.js",
  entities: [User]
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@server/queries.js",
  entities: [Company, Project, Task],
}

action createTask {
  fn: import { createTask } from "@server/tasks/actions.js",
  entities: [Task]
}

action assignToTask {
  fn: import { assignToTask } from "@server/tasks/actions.js",
  entities: [TaskAssignment]
}

action removeFromTask {
  fn: import { removeFromTask } from "@server/tasks/actions.js",
  entities: [TaskAssignment]
}

action updateTask {
  fn: import { updateTask } from "@server/tasks/actions.js",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@server/tasks/actions.js",
  entities: [Task]
}

action updateAssignees {
  fn: import {updateAssignees} from "@server/tasks/actions.js",
  entities: [TaskAssignment, User, Task]
}

action createProject {
  fn: import { createProject } from "@server/projects/actions.js",
  entities: [Project]
}

action updateProject {
  fn: import { updateProject } from "@server/projects/actions.js",
  entities: [Project]
}

action deleteProject {
  fn: import {deleteProject} from "@server/projects/actions.js",
  entities: [Project]
}

action createProjectGroup {
  fn: import {createProjectGroup} from "@server/projects/actions.js",
  entities: [ProjectGroup]

}

action updateProjectGroup {
  fn: import {updateProjectGroup} from "@server/projects/actions.js",
  entities: [ProjectGroup]
}

action deleteProjectGroup {
  fn: import {deleteProjectGroup} from "@server/projects/actions.js",
  entities: [ProjectGroup]
}

action createCompany {
  fn: import {createCompany} from "@server/companies/actions.js",
  entities: [Company]
}

action updateCompany {
  fn: import {updateCompany} from "@server/companies/actions.js",
  entities: [Company]
}

action deleteCompany {
  fn: import {deleteCompany} from "@server/companies/actions.js",
  entities: [Company]
}

// action createUser {
//   fn: import {createUser} from "@server/users/actions.js",
//   entities: [User]
// }

action updatePassword {
  fn: import {updatePassword} from "@server/users/actions.js",
  entities: [User]
}
